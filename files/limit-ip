#!/bin/bash
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# System Request : Debian 9+/Ubuntu 18.04+/20+
# Developers » 𝐑𝟑𝟐𝐖𝐑𝐓𝐱𝐓𝐔𝐍𝐍𝐄𝐋𝐈𝐍𝐆
# telegram   » https://t.me/R32WRT_STORE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ꧁༒༺𝐑𝟑𝟐𝐖𝐑𝐓𝐱𝐓𝐔𝐍𝐍𝐄𝐋𝐈𝐍𝐆༻༒꧂

CHECK_INTERVAL=300  # Script By :
WAIT_TIME=900       # ꧁༒༺𝐑𝟑𝟐𝐖𝐑𝐓𝐱𝐓𝐔𝐍𝐍𝐄𝐋𝐈𝐍𝐆༻༒꧂

function send_log() {
    # First bot configuration
    CHATID=$(grep -E "^#bot# " "/etc/bot/.bot.db" | cut -d ' ' -f 3)
    KEY=$(grep -E "^#bot# " "/etc/bot/.bot.db" | cut -d ' ' -f 2)
    TIME="10"
    URL="https://api.telegram.org/bot$KEY/sendMessage"

    # Second bot configuration
    CHATID2=$(grep -E "^#bot2# " "/etc/bot/.bot2.db" | cut -d ' ' -f 3)
    KEY2=$(grep -E "^#bot2# " "/etc/bot/.bot2.db" | cut -d ' ' -f 2)
    URL2="https://api.telegram.org/bot$KEY2/sendMessage"

    isp=$(cat /etc/xray/isp)
    domain=$(cat /etc/xray/domain)
    DATEVPS=$(date +'%d/%m/%Y')
    TIMEZONE=$(date +"%H:%M %Z")
    status="$1"

    if [ "$status" == "🟢🔓ACCOUNT UNLOCKED🔓🟢" ]; then
        TEXT="
<code>──────────────────────────────</code>
<b>⚠️ NOTIFICATIONS MULTI LOGIN ⚠️</b>
<code>──────────────────────────────</code>
<code>❖ » USER   : ${user}</code>
<code>❖ » ISP    : ${isp}</code>
<code>❖ » DOMAIN : ${domain}</code>
<code>❖ » PATH   : ${protocol}</code>
<code>❖ » TIME   : ${TIMEZONE}</code>
<code>❖ » DATE   : ${DATEVPS}</code>
<code>──────────────────────────────</code>
<code>❖ » LIMIT  : ${iplimit} IP</code>
<code>──────────────────────────────</code>
<code>❖ » ${status}</code>
<code>──────────────────────────────</code>
"
    else
        TEXT="
<code>──────────────────────────────</code>
<b>⚠️ NOTIFICATIONS MULTI LOGIN ⚠️</b>
<code>──────────────────────────────</code>
<code>❖ » USER   : ${user}</code>
<code>❖ » ISP    : ${isp}</code>
<code>❖ » DOMAIN : ${domain}</code>
<code>❖ » PATH   : ${protocol}</code>
<code>❖ » TIME   : ${TIMEZONE}</code>
<code>❖ » DATE   : ${DATEVPS}</code>
<code>──────────────────────────────</code>
<code>❖ » LIMIT  : ${iplimit} IP</code>
<code>❖ » LOGIN  : ${cekcek} IP</code>
<code>──────────────────────────────</code>
<code>❖ » DETAIL ${cekcek} IP LOGIN</code>
$(echo -e "$ehh" | sed 's/^/❖ » /' | sed 's/^/<code>/;s/$/<\/code>/')
<code>──────────────────────────────</code>
<code>❖ » ${status}</code>
<code>──────────────────────────────</code>
"
    fi

    curl -s --max-time $TIME -d "chat_id=$CHATID&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL >/dev/null
    curl -s --max-time $TIME -d "chat_id=$CHATID2&disable_web_page_preview=1&text=$TEXT&parse_mode=html" $URL2 >/dev/null
}

function backup_and_remove_user() {
    exp=$1
    user=$2
    config_file=$3
    db_file=$4
    ip_limit_file=$5
    backup_dir="/tmp/${user}_backup"

    # Backup the user configuration
    mkdir -p $backup_dir
    cp $config_file $backup_dir/config.json
    cp $db_file $backup_dir/db.json
    echo $iplimit > $backup_dir/iplimit

    # Remove the user configuration
    sed -i "/^### $user $exp/,/^},{/d" $config_file
    sed -i "/^### $user $exp/d" $db_file
}

function restore_user() {
    user=$1
    config_file=$2
    db_file=$3
    ip_limit_dir=$4
    backup_dir="/tmp/${user}_backup"

    # Restore the user configuration from the backup directory
    cp $backup_dir/config.json $config_file
    cp $backup_dir/db.json $db_file
    iplimit=$(cat $backup_dir/iplimit)
    echo $iplimit > $ip_limit_dir/$user

    # Remove the backup directory
    rm -rf $backup_dir
}

function check_user() {
    protocol=$1
    config_file=$2
    db_file=$3
    ip_limit_dir="/etc/kyt/limit/$protocol/ip"

    data=( $(ls $ip_limit_dir) )
    for user in "${data[@]}"; do
        iplimit=$(cat "$ip_limit_dir/$user")
        ehh=$(grep "$user" /var/log/xray/access.log | cut -d " " -f 3 | sed 's/tcp://g' | cut -d ":" -f 1 | sort | uniq | grep -v "^127.0.0.1$")
        cekcek=$(echo -e "$ehh" | wc -l)
        if [[ $cekcek -gt $iplimit ]]; then
            exp=$(grep -w "^### $user" "$config_file" | cut -d ' ' -f 3 | sort | uniq)
            uuid=$(grep -A 1 "^### $user $exp" $config_file | grep 'id' | cut -d '"' -f 4)
            backup_and_remove_user "$exp" "$user" "$config_file" "$db_file" "$ip_limit_dir/$user"
            systemctl restart xray >> /dev/null 2>&1
            rm -rf "$ip_limit_dir/$user"
            send_log "🔴🔒ACCOUNT LOCKED🔒🔴"
            (
                sleep $WAIT_TIME
                restore_user "$user" "$config_file" "$db_file" "$ip_limit_dir"
                systemctl restart xray >> /dev/null 2>&1
                send_log "🟢🔓ACCOUNT UNLOCKED🔓🟢"
            ) &
        fi
    done
}

function vmip() {
    echo -n > /var/log/xray/access.log
    sleep 10
    check_user "vmess" "/etc/xray/config.json" "/etc/vmess/.vmess.db"
}

function vlip() {
    echo -n > /var/log/xray/access.log
    sleep 10
    check_user "vless" "/etc/xray/config.json" "/etc/vless/.vless.db"
}

function trip() {
    echo -n > /var/log/xray/access.log
    sleep 10
    check_user "trojan" "/etc/xray/config.json" "/etc/trojan/.trojan.db"
}

while true; do
    vmip &
    vlip &
    trip &
    wait
    sleep $CHECK_INTERVAL
done
